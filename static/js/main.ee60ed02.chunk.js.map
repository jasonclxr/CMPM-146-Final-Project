{"version":3,"sources":["mcts.js","context/AppContext.js","components/SelectSettings.jsx","components/Header.jsx","imgs/Skill-Sprite-Sheet.png","components/Sprite.jsx","routes/Home.jsx","App.jsx","index.js"],"names":["copier","require","Skill","name","attribute","row","maxPoints","branch","this","points","MCTSNode","parent","parent_action","untried_skills","child_nodes","Map","visits","score","Simulator","desired_skills","healing_sim","Healing","close_range_sim","Melee","ranged_sim","Ranged","adrenaline_sim","Adrenaline","defense_sim","Defense","unique_sim","Unique","cared_about","caredAboutTraits","desired","findDesiredSkills","Object","entries","sort","a","skill_tree","skill_name","new_tree","SkillTree","from","addPoint","push","undesired_actions","desired_actions","points_remaining","undesired","skills","key","isLegal","get","description","legal_actions","total","healing_count","close_range_count","ranged_count","adrenaline_count","defense_count","unique_count","console","log","healing","close_range","ranged","adrenaline","defense","unique","Math","pow","combat_count","combat_row","signs_count","signs_row","alchemy_count","alchemy_row","is_legal","branch_name","addAttribute","Attributes","HEALING","CLOSE_RANGE","RANGED","ADRENALINE","DEFENSE","UNIQUE","error","skill","cloneDeep","MCTS","num_nodes","explore_factor","simulator","child_node","sqrt","node","current_node","max_uct_node","length","size","max_uct","Infinity","values","uct","UCT","new_node","move_index","new_action","floor","random","nextState","getDesiredActions","set","bad_skill","curr_skill_attr","includes","isEnded","legalActions","getScore","root_node","sampled_tree","step","chosen_node","traverse_nodes","chosen_actions","i","expand_leaf","rollout","backpropagate","maximum_score","action","skill_node","freeze","Symbol","createTree","num_points","tree","muscleMemory","strengthTraining","arrowDeflection","lightningReflexes","resolve","preciseBlows","crushingBlows","fleetFooted","coldBlood","undying","whirl","rend","counterAttack","anatomicalKnowledge","razorFocus","cripplingStrikes","sunderArmor","deadlyPrecision","cripplingShot","floodOfAnger","farReachingAard","meltArmor","sustainedGlyphs","explodingShield","delusion","aardSweep","firestream","magicTrap","activeShield","puppet","aardIntensity","igniIntensity","yrdenIntensity","quenIntensity","axiiIntensity","shockWave","pyromaniac","superchargedGlyphs","quenDischarge","domination","heightenedTolerance","poisonedBlades","steadyAim","acquiredTolerance","frenzy","refreshment","protectiveCoating","pyrotechnics","tissueTransmutation","endurePain","delayedRecovery","fixative","efficiency","synergy","fastMetabolism","sideEffects","hunterInstinct","clusterBombs","adaption","killingSpree","sunAndStars","survivalInstinct","catSchoolTechniques","griffinSchoolTechniques","bearSchoolTechniques","steadyShot","rageManagement","focusGen","adrenalineBurst","metabolismControl","generateSkills","mcts_tree","mcts","think","AppContext","createContext","AppContextProvider","props","useState","combat","sign","alchemy","general","selectedSkills","setSelectedSkills","Provider","value","children","convertSkillsToRepresentation","combats","signs","generals","SelectSettings","setValue","startTree","pointCount","setPointCount","isLoading","setLoading","useContext","useEffect","Promise","r","setTimeout","selected_skills","computeSkills","handleSubmit","e","preventDefault","calculateSliders","newValue","parseInt","target","difference","sorted","reduce","k","v","diff_remaining","val","Form","style","width","onSubmit","Group","as","Row","className","Label","Col","Control","type","pattern","onChange","display","alignItems","keys","map","index","column","sm","startCase","camelCase","replace","Range","min","max","Button","disabled","Spinner","animation","role","Header","Sprite","item","info","customData","frames","backgroundImage","backgroundPosition","frame","x","y","backgroundRepeat","w","height","h","margin","OverlayTrigger","placement","overlay","Popover","id","Body","desc","Home","zIndex","Tabs","defaultActiveKey","variant","data","arr","result","slice","chunkArrayInGroups","Tab","eventKey","title","capitalize","Container","rowIndex","xs","itemIndex","App","filter","basename","window","location","pathname","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee60ed02.chunk.js","sourcesContent":["const copier = require('lodash');\nclass Skill {\n    constructor(name, attribute, row, maxPoints, branch) {\n        this.name = name;\n        this.attribute = attribute;\n        this.row = row;\n        this.points = 0;\n        this.maxPoints = maxPoints;\n        this.branch = branch;\n    }\n\n    is_legal() {\n        return this.points < this.maxPoints;\n    }\n};\n\nclass MCTSNode {\n    constructor(parent, parent_action, untried_skills) {\n        this.parent = parent;\n        this.parent_action = parent_action;\n        this.untried_skills = untried_skills;\n        this.child_nodes = new Map();\n        this.visits = 0;\n        this.score = 0;\n    }\n}\n\nclass Simulator {\n    constructor(desired_skills = {}) {\n        this.healing_sim = desired_skills.Healing ?? 0;\n        this.close_range_sim = desired_skills.Melee ?? 0;\n        this.ranged_sim = desired_skills.Ranged ?? 0;\n        this.adrenaline_sim = desired_skills.Adrenaline ?? 0;\n        this.defense_sim = desired_skills.Defense ?? 0;\n        this.unique_sim = desired_skills.Unique ?? 0;\n\n        this.cared_about = [];\n        this.caredAboutTraits();\n\n        this.desired = this.findDesiredSkills(desired_skills);\n    }\n\n    findDesiredSkills(desired_skills) {\n        let max_key = Object.entries(desired_skills)\n            .sort(([, a], [, b]) => b - a)[0][0];\n        return max_key;\n    }\n\n    nextState(skill_tree, skill_name) {\n        let new_tree = SkillTree.from(skill_tree);\n        new_tree.addPoint(skill_name);\n        return new_tree;\n    }\n\n    caredAboutTraits() {\n        if (this.healing_sim > 0) this.cared_about.push(\"Healing\");\n        if (this.close_range_sim > 0) this.cared_about.push(\"Melee\");\n        if (this.ranged_sim > 0) this.cared_about.push(\"Ranged\");\n        if (this.adrenaline_sim > 0) this.cared_about.push(\"Adrenaline\");\n        if (this.defense_sim > 0) this.cared_about.push(\"Defense\");\n        if (this.unique_sim > 0) this.cared_about.push(\"Unique\");\n    }\n\n    getDesiredActions(skill_tree) {\n        let undesired_actions = [];\n        let desired_actions = [];\n        if (skill_tree.points_remaining === 0) {\n            return { desired: [], undesired: [] };\n        }\n        for (let [key] of skill_tree.skills.entries()) {\n            if (skill_tree.isLegal(key)) {\n                if (this.desired === skill_tree.skills.get(key).attribute.description) {\n                    desired_actions.push(key);\n                } else {\n                    undesired_actions.push(key);\n                }\n            }\n        }\n        let total_actions = {\n            desired: desired_actions,\n            undesired: undesired_actions\n        };\n        return total_actions;\n    }\n\n    legalActions(skill_tree) {\n        let legal_actions = [];\n        if (skill_tree.points_remaining === 0) {\n            return legal_actions;\n        }\n        for (let [key] of skill_tree.skills.entries()) {\n            if (skill_tree.isLegal(key)) {\n                legal_actions.push(key);\n            }\n        }\n        return legal_actions;\n    }\n\n    isEnded(skill_tree) {\n        return skill_tree.points_remaining < 1;\n    }\n\n    printFractions(skill_tree) {\n        let total = skill_tree.healing_count + skill_tree.close_range_count + skill_tree.ranged_count + skill_tree.adrenaline_count + skill_tree.defense_count + skill_tree.unique_count;\n        console.log(\"Healing: \", 100 * skill_tree.healing_count / total);\n        console.log(\"Close Range \", 100 * skill_tree.close_range_count / total);\n        console.log(\"Range: \", 100 * skill_tree.ranged_count / total);\n        console.log(\"Adrenaline: \", 100 * skill_tree.adrenaline_count / total);\n        console.log(\"Defense: \", 100 * skill_tree.defense_count / total);\n        console.log(\"Unique: \", 100 * skill_tree.unique_count / total);\n    }\n\n    getScore(skill_tree) {\n        let total = skill_tree.healing_count + skill_tree.close_range_count + skill_tree.ranged_count + skill_tree.adrenaline_count + skill_tree.defense_count + skill_tree.unique_count;\n        let healing = 100 * skill_tree.healing_count / total;\n        let close_range = 100 * skill_tree.close_range_count / total;\n        let ranged = 100 * skill_tree.ranged_count / total;\n        let adrenaline = 100 * skill_tree.adrenaline_count / total;\n        let defense = 100 * skill_tree.defense_count / total;\n        let unique = 100 * skill_tree.unique_count / total;\n        healing = Math.pow((healing - this.healing_sim), 2);\n        close_range = Math.pow((close_range - this.close_range_sim), 2);\n        ranged = Math.pow((ranged - this.ranged_sim), 2);\n        adrenaline = Math.pow((adrenaline - this.adrenaline_sim), 2);\n        defense = Math.pow((defense - this.defense_sim), 2);\n        unique = Math.pow((unique - this.unique_sim), 2);\n        return Math.pow((healing + close_range + ranged + adrenaline + defense + unique), 0.5);\n    }\n}\n\nclass SkillTree {\n    constructor(skills, points_remaining, combat_count, combat_row, signs_count, signs_row, alchemy_count, alchemy_row, healing_count, close_range_count, ranged_count, adrenaline_count, defense_count, unique_count) {\n        this.skills = skills;\n        this.points_remaining = points_remaining;\n        this.combat_count = combat_count;\n        this.combat_row = combat_row;\n        this.signs_count = signs_count;\n        this.signs_row = signs_row;\n        this.alchemy_count = alchemy_count;\n        this.alchemy_row = alchemy_row;\n        this.healing_count = healing_count;\n        this.close_range_count = close_range_count;\n        this.ranged_count = ranged_count;\n        this.adrenaline_count = adrenaline_count;\n        this.defense_count = defense_count;\n        this.unique_count = unique_count;\n    }\n\n    static from(skill_tree) {\n        return new SkillTree(copier.cloneDeep(skill_tree.skills), skill_tree.points_remaining, skill_tree.combat_count, skill_tree.combat_row, skill_tree.signs_count, skill_tree.signs_row, skill_tree.alchemy_count, skill_tree.alchemy_row, skill_tree.healing_count, skill_tree.close_range_count, skill_tree.ranged_count, skill_tree.adrenaline_count, skill_tree.defense_count, skill_tree.unique_count);\n    }\n\n    addPoint(skill_name) {\n        if (this.skills.get(skill_name).is_legal()) {\n            this.skills.get(skill_name).points += 1;\n            let branch_name = this.skills.get(skill_name).branch;\n            if (branch_name === \"combat\") {\n                this.combat_count++;\n                if (this.combat_count >= 30) {\n                    this.combat_row = 3;\n                } else if (this.combat_count >= 20) {\n                    this.combat_row = 2;\n                } else if (this.combat_count >= 8) {\n                    this.combat_row = 1;\n                } else {\n                    this.combat_row = 0;\n                }\n            } else if (branch_name === \"signs\") {\n                this.signs_count++;\n                if (this.signs_count >= 28) {\n                    this.signs_row = 3;\n                } else if (this.signs_count >= 18) {\n                    this.signs_row = 2;\n                } else if (this.signs_count >= 6) {\n                    this.signs_row = 1;\n                } else {\n                    this.signs_row = 0;\n                }\n            } else if (branch_name === \"alchemy\") {\n                this.alchemy_count++;\n                if (this.alchemy_count >= 28) {\n                    this.alchemy_row = 3;\n                } else if (this.alchemy_count >= 20) {\n                    this.alchemy_row = 2;\n                } else if (this.alchemy_count >= 8) {\n                    this.alchemy_row = 1;\n                } else {\n                    this.alchemy_row = 0;\n                }\n            }\n            this.points_remaining -= 1;\n            this.addAttribute(skill_name);\n        }\n    }\n\n    addAttribute(skill_name) {\n        let attr_code = this.skills.get(skill_name).attribute;\n        switch (attr_code) {\n            case Attributes.HEALING:\n                this.healing_count++;\n                break;\n            case Attributes.CLOSE_RANGE:\n                this.close_range_count++;\n                break;\n            case Attributes.RANGED:\n                this.ranged_count++;\n                break;\n            case Attributes.ADRENALINE:\n                this.adrenaline_count++;\n                break;\n            case Attributes.DEFENSE:\n                this.defense_count++;\n                break;\n            case Attributes.UNIQUE:\n                this.unique_count++;\n                break;\n            default:\n                console.error(\"Attribute does not exist\");\n                break;\n        }\n    }\n\n    isLegal(skill_name) {\n        let skill = this.skills.get(skill_name);\n        if (skill.is_legal() === false) {\n            return false;\n        }\n        let branch_name = skill.branch;\n        if (branch_name === \"general\") {\n            return true;\n        }\n        if (branch_name === \"combat\") {\n            if (skill.row > this.combat_row) {\n                return false;\n            }\n        }\n        else if (branch_name === \"signs\") {\n            if (skill.row > this.signs_row) {\n                return false;\n            }\n        }\n        else if (branch_name === \"alchemy\") {\n            if (skill.row > this.alchemy_row) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n\nclass MCTS {\n    constructor(num_nodes, explore_factor, simulator) {\n        this.num_nodes = num_nodes;\n        this.explore_factor = explore_factor;\n        this.simulator = simulator;\n    }\n\n    UCT(child_node) {\n        let uct = -Infinity;\n        if (child_node.parent === null) {\n            uct = 1 - child_node.score / child_node.visits;\n        } else {\n            uct = (1 - (child_node.score / child_node.visits)) + this.explore_factor * 2 * Math.sqrt(Math.log(child_node.parent.visits) / child_node.visits);\n        }\n        return uct;\n    }\n    // Traverse graph using UCT function until leaf node is reached\n    traverse_nodes(node) {\n        let current_node = node;\n        let max_uct_node = current_node;\n        while ((current_node.untried_skills.desired.length > 0 || current_node.untried_skills.undesired.length > 0) && current_node.child_nodes.size > 0) {\n            let max_uct = -Infinity;\n            for (let child_node of current_node.child_nodes.values()) {\n                let uct = this.UCT(child_node);\n                if (uct > max_uct) {\n                    max_uct = uct;\n                    max_uct_node = child_node;\n                }\n            }\n            current_node = max_uct_node;\n        }\n        return current_node;\n    }\n\n    // Adds a new leaf to the tree by creating a new child node for the given node.\n    expand_leaf(node, skill_tree) {\n        let new_node = node;\n        if (node.untried_skills.undesired.length > 0 || node.untried_skills.desired.length > 0) {\n            let move_index = 0;\n            let new_action = \"\";\n            // Heurisitcs\n            // 1st Heuristic: Checks to see if we have any available skills that is the highest desired trait and\n            // returns/pops one off the list\n            if (node.untried_skills.desired.length > 0) {\n                move_index = Math.floor(Math.random() * node.untried_skills.desired.length);\n                new_action = node.untried_skills.desired[move_index];\n                skill_tree = this.simulator.nextState(skill_tree, new_action);\n                new_node = new MCTSNode(node, new_action, this.simulator.getDesiredActions(skill_tree));\n                node.child_nodes.set(new_action, new_node);\n                return new_node;\n            }\n            // If we have no desired skills from the highest trait, choose one at random\n            let bad_skill = true;\n            while (bad_skill) {\n                move_index = Math.floor(Math.random() * node.untried_skills.undesired.length);\n                new_action = node.untried_skills.undesired[move_index];\n                let curr_skill_attr = skill_tree.skills.get(new_action).attribute.description;\n                let curr_skill_branch = skill_tree.skills.get(new_action).branch;\n                // 2nd heuristic: if we find a general skill that has a trait we are not looking for, completely ignore\n                if (curr_skill_branch === \"general\" && !this.simulator.cared_about.includes(curr_skill_attr)) {\n                    move_index = Math.floor(Math.random * node.untried_skills.undesired.length);\n                    new_action = node.untried_skills.undesired[move_index];\n                    continue;\n                }\n                bad_skill = false;\n\n            }\n            skill_tree = this.simulator.nextState(skill_tree, new_action);\n            new_node = new MCTSNode(node, new_action, this.simulator.getDesiredActions(skill_tree));\n            node.child_nodes.set(new_action, new_node);\n        }\n        return new_node;\n    }\n\n    // Selects random skills until points are depleted\n    rollout(skill_tree) {\n        while (this.simulator.isEnded(skill_tree) !== true) {\n            var legal_actions = this.simulator.legalActions(skill_tree);\n            var move_index = Math.floor(Math.random() * legal_actions.length);\n            skill_tree = this.simulator.nextState(skill_tree, legal_actions[move_index]);\n        }\n        return this.simulator.getScore(skill_tree);\n    }\n\n    // Propagate result back through the graph\n    // Calculate differences between given fractions and fractions found\n    backpropagate(node, score) {\n        while (node.parent !== null) {\n            node.visits += 1;\n            node.score += score;\n            node = node.parent;\n        }\n        node.score += score;\n        node.visits += 1;\n        return node;\n    }\n\n    // Performs MCTS by sampling games and returns the action\n    think(skill_tree) {\n        let root_node = new MCTSNode(null, null, this.simulator.getDesiredActions(skill_tree));\n        let sampled_tree = skill_tree;\n        let node = root_node;\n        for (let step = 0; step < 350; step++) {\n            sampled_tree = skill_tree;\n            node = root_node;\n            node = this.traverse_nodes(node);\n            let chosen_node = node;\n            let chosen_actions = [];\n            while (chosen_node.parent !== null) {\n                chosen_actions.push(chosen_node.parent_action);\n                chosen_node = chosen_node.parent;\n            }\n            for (let i = chosen_actions.length - 1; i >= 0; i--) {\n                sampled_tree = this.simulator.nextState(sampled_tree, chosen_actions[i]);\n            }\n            if (this.simulator.isEnded(sampled_tree) !== true) {\n                node = this.expand_leaf(node, sampled_tree);\n                sampled_tree = this.simulator.nextState(sampled_tree, node.parent_action);\n                let score = this.rollout(sampled_tree);\n                this.backpropagate(node, score);\n            }\n        }\n        let maximum_score = -1;\n        let action = null;\n        for (let [key, skill_node] of root_node.child_nodes) {\n            if (skill_node.score > maximum_score) {\n                maximum_score = skill_node.score;\n                action = key;\n            }\n        }\n        return action;\n    }\n\n}\n\nconst Attributes = Object.freeze({\n    HEALING: Symbol(\"Healing\"),\n    CLOSE_RANGE: Symbol(\"Melee\"),\n    RANGED: Symbol(\"Ranged\"),\n    ADRENALINE: Symbol(\"Adrenaline\"),\n    DEFENSE: Symbol(\"Defense\"),\n    UNIQUE: Symbol(\"Unique\")\n});\n\nexport function createTree(num_points = 50) {\n\n    var tree = new SkillTree(new Map(), num_points, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n\n    let muscleMemory = new Skill(\"Muscle Memory\", Attributes.CLOSE_RANGE, 0, 5, \"combat\");\n    tree.skills.set(\"Muscle Memory\", muscleMemory);\n    let strengthTraining = new Skill(\"Strength Training\", Attributes.CLOSE_RANGE, 0, 5, \"combat\");\n    tree.skills.set(\"Strength Training\", strengthTraining);\n    let arrowDeflection = new Skill(\"Arrow Deflection\", Attributes.DEFENSE, 0, 3, \"combat\");\n    tree.skills.set(\"Arrow Deflection\", arrowDeflection);\n    let lightningReflexes = new Skill(\"Lightning Reflexes\", Attributes.RANGED, 0, 3, \"combat\");\n    tree.skills.set(\"Lightning Reflexes\", lightningReflexes);\n    let resolve = new Skill(\"Resolve\", Attributes.ADRENALINE, 0, 5, \"combat\");\n    tree.skills.set(\"Resolve\", resolve);\n\n    let preciseBlows = new Skill(\"Precise Blows\", Attributes.CLOSE_RANGE, 1, 5, \"combat\");\n    tree.skills.set(\"Precise Blows\", preciseBlows);\n    let crushingBlows = new Skill(\"Crushing Blows\", Attributes.CLOSE_RANGE, 1, 5, \"combat\");\n    tree.skills.set(\"Crushing Blows\", crushingBlows);\n    let fleetFooted = new Skill(\"Fleet Footed\", Attributes.DEFENSE, 1, 5, \"combat\");\n    tree.skills.set(\"Fleet Footed\", fleetFooted);\n    let coldBlood = new Skill(\"Cold Blood\", Attributes.ADRENALINE, 1, 5, \"combat\");\n    tree.skills.set(\"Cold Blood\", coldBlood);\n    let undying = new Skill(\"Undying\", Attributes.HEALING, 1, 5, \"combat\");\n    tree.skills.set(\"Undying\", undying);\n\n    let whirl = new Skill(\"Whirl\", Attributes.CLOSE_RANGE, 2, 5, \"combat\");\n    tree.skills.set(\"Whirl\", whirl);\n    let rend = new Skill(\"Crushing Blows\", Attributes.CLOSE_RANGE, 2, 5, \"combat\");\n    tree.skills.set(\"Rend\", rend);\n    let counterAttack = new Skill(\"Counter Attack\", Attributes.DEFENSE, 2, 3, \"combat\");\n    tree.skills.set(\"Counter Attack\", counterAttack);\n    let anatomicalKnowledge = new Skill(\"Anatomical Knowledge\", Attributes.RANGED, 2, 5, \"combat\");\n    tree.skills.set(\"Anatomical Knowledge\", anatomicalKnowledge);\n    let razorFocus = new Skill(\"Razor Focus\", Attributes.ADRENALINE, 2, 5, \"combat\");\n    tree.skills.set(\"Razor Focus\", razorFocus);\n\n    let cripplingStrikes = new Skill(\"Crippling Strikes\", Attributes.CLOSE_RANGE, 3, 5, \"combat\");\n    tree.skills.set(\"Crippling Strikes\", cripplingStrikes);\n    let sunderArmor = new Skill(\"Sunder Armor\", Attributes.UNIQUE, 3, 5, \"combat\");\n    tree.skills.set(\"Sunder Armor\", sunderArmor);\n    let deadlyPrecision = new Skill(\"Deadly Precision\", Attributes.ADRENALINE, 3, 2, \"combat\");\n    tree.skills.set(\"Deadly Precision\", deadlyPrecision);\n    let cripplingShot = new Skill(\"Crippling Shot\", Attributes.RANGED, 3, 5, \"combat\");\n    tree.skills.set(\"Crippling Shot\", cripplingShot);\n    let floodOfAnger = new Skill(\"Flood of Anger\", Attributes.ADRENALINE, 3, 5, \"combat\");\n    tree.skills.set(\"Flood of Anger\", floodOfAnger);\n\n    let farReachingAard = new Skill(\"Far Reaching Aard\", Attributes.DEFENSE, 0, 3, \"signs\");\n    tree.skills.set(\"Far Reaching Aard\", farReachingAard);\n    let meltArmor = new Skill(\"Strength Training\", Attributes.CLOSE_RANGE, 0, 5, \"signs\");\n    tree.skills.set(\"Melt Armor\", meltArmor);\n    let sustainedGlyphs = new Skill(\"Sustained Glyphs\", Attributes.UNIQUE, 0, 2, \"signs\");\n    tree.skills.set(\"Sustained Glyphs\", sustainedGlyphs);\n    let explodingShield = new Skill(\"Exploding Shield\", Attributes.DEFENSE, 0, 3, \"signs\");\n    tree.skills.set(\"Exploding Shield\", explodingShield);\n    let delusion = new Skill(\"Delusion\", Attributes.UNIQUE, 0, 3, \"signs\");\n    tree.skills.set(\"Delusion\", delusion);\n\n    let aardSweep = new Skill(\"Aard Sweep\", Attributes.DEFENSE, 1, 3, \"signs\");\n    tree.skills.set(\"Aard Sweep\", aardSweep);\n    let firestream = new Skill(\"Firestream\", Attributes.CLOSE_RANGE, 1, 3, \"signs\");\n    tree.skills.set(\"Firestream\", firestream);\n    let magicTrap = new Skill(\"Magic Trap\", Attributes.UNIQUE, 1, 3, \"signs\");\n    tree.skills.set(\"Magic Trap\", magicTrap);\n    let activeShield = new Skill(\"Active Shield\", Attributes.DEFENSE, 1, 3, \"signs\");\n    tree.skills.set(\"Active Shield\", activeShield);\n    let puppet = new Skill(\"Puppet\", Attributes.UNIQUE, 1, 3, \"signs\");\n    tree.skills.set(\"Puppet\", puppet);\n\n    let aardIntensity = new Skill(\"Aard Intensity\", Attributes.DEFENSE, 2, 5, \"signs\");\n    tree.skills.set(\"Aard Intensity\", aardIntensity);\n    let igniIntensity = new Skill(\"Igni Intensity\", Attributes.CLOSE_RANGE, 2, 5, \"signs\");\n    tree.skills.set(\"Igni Intensity\", igniIntensity);\n    let yrdenIntensity = new Skill(\"Yrden Intensity\", Attributes.UNIQUE, 2, 5, \"signs\");\n    tree.skills.set(\"Yrden Intensity\", yrdenIntensity);\n    let quenIntensity = new Skill(\"Quen Intensity\", Attributes.DEFENSE, 2, 5, \"signs\");\n    tree.skills.set(\"Quen Intensity\", quenIntensity);\n    let axiiIntensity = new Skill(\"Razor Focus\", Attributes.UNIQUE, 2, 5, \"signs\");\n    tree.skills.set(\"Axii Intensity\", axiiIntensity);\n\n    let shockWave = new Skill(\"Shock Wave\", Attributes.DEFENSE, 3, 5, \"signs\");\n    tree.skills.set(\"Shock Wave\", shockWave);\n    let pyromaniac = new Skill(\"Pyromaniac\", Attributes.CLOSE_RANGE, 3, 5, \"signs\");\n    tree.skills.set(\"Pyromaniac\", pyromaniac);\n    let superchargedGlyphs = new Skill(\"Supercharged Glyphs\", Attributes.UNIQUE, 3, 5, \"signs\");\n    tree.skills.set(\"Supercharged Glyphs\", superchargedGlyphs);\n    let quenDischarge = new Skill(\"Quen Discharge\", Attributes.DEFENSE, 3, 5, \"signs\");\n    tree.skills.set(\"Quen Discharge\", quenDischarge);\n    let domination = new Skill(\"Domination\", Attributes.UNIQUE, 3, 3, \"signs\");\n    tree.skills.set(\"Domination\", domination);\n\n    let heightenedTolerance = new Skill(\"Heightened Tolerance\", Attributes.HEALING, 0, 5, \"alchemy\");\n    tree.skills.set(\"Heightened Tolerance\", heightenedTolerance);\n    let poisonedBlades = new Skill(\"Poisoned Blades\", Attributes.CLOSE_RANGE, 0, 5, \"alchemy\");\n    tree.skills.set(\"Poisoned Blades\", poisonedBlades);\n    let steadyAim = new Skill(\"Steady Aim\", Attributes.RANGED, 0, 3, \"alchemy\");\n    tree.skills.set(\"Steady Aim\", steadyAim);\n    let acquiredTolerance = new Skill(\"Acquired Tolerance\", Attributes.UNIQUE, 0, 3, \"alchemy\");\n    tree.skills.set(\"Acquired Tolerance\", acquiredTolerance);\n    let frenzy = new Skill(\"Frenzy\", Attributes.DEFENSE, 0, 3, \"alchemy\");\n    tree.skills.set(\"Frenzy\", frenzy);\n\n    let refreshment = new Skill(\"Refreshment\", Attributes.HEALING, 1, 5, \"alchemy\");\n    tree.skills.set(\"Refreshment\", refreshment);\n    let protectiveCoating = new Skill(\"Protective Coating\", Attributes.DEFENSE, 1, 5, \"alchemy\");\n    tree.skills.set(\"Protective Coating\", protectiveCoating);\n    let pyrotechnics = new Skill(\"Pyrotechnics\", Attributes.RANGED, 1, 5, \"alchemy\");\n    tree.skills.set(\"Pyrotechnics\", pyrotechnics);\n    let tissueTransmutation = new Skill(\"Tissue Transmutation\", Attributes.HEALING, 1, 5, \"alchemy\");\n    tree.skills.set(\"Tissue Transmutation\", tissueTransmutation);\n    let endurePain = new Skill(\"Endure Pain\", Attributes.HEALING, 1, 5, \"alchemy\");\n    tree.skills.set(\"Endure Pain\", endurePain);\n\n    let delayedRecovery = new Skill(\"Delayed Recovery\", Attributes.UNIQUE, 2, 3, \"alchemy\");\n    tree.skills.set(\"Delayed Recovery\", delayedRecovery);\n    let fixative = new Skill(\"Fixative\", Attributes.CLOSE_RANGE, 2, 3, \"alchemy\");\n    tree.skills.set(\"Fixative\", fixative);\n    let efficiency = new Skill(\"Efficiency\", Attributes.RANGED, 2, 5, \"alchemy\");\n    tree.skills.set(\"Efficiency\", efficiency);\n    let synergy = new Skill(\"Synergy\", Attributes.UNIQUE, 2, 5, \"alchemy\");\n    tree.skills.set(\"Synergy\", synergy);\n    let fastMetabolism = new Skill(\"Fast Metabolism\", Attributes.UNIQUE, 2, 5, \"alchemy\");\n    tree.skills.set(\"Fast Metabolism\", fastMetabolism);\n\n    let sideEffects = new Skill(\"Side Effects\", Attributes.HEALING, 3, 5, \"alchemy\");\n    tree.skills.set(\"Side Effects\", sideEffects);\n    let hunterInstinct = new Skill(\"Hunter Instinct\", Attributes.ADRENALINE, 3, 5, \"alchemy\");\n    tree.skills.set(\"Hunter Instinct\", hunterInstinct);\n    let clusterBombs = new Skill(\"Cluster Bombs\", Attributes.RANGED, 3, 5, \"alchemy\");\n    tree.skills.set(\"Cluster Bombs\", clusterBombs);\n    let adaption = new Skill(\"Adaption\", Attributes.UNIQUE, 3, 5, \"alchemy\");\n    tree.skills.set(\"Adaption\", adaption);\n    let killingSpree = new Skill(\"Killing Spree\", Attributes.CLOSE_RANGE, 3, 5, \"alchemy\");\n    tree.skills.set(\"Killing Spree\", killingSpree);\n\n    let sunAndStars = new Skill(\"Sun and Stars\", Attributes.HEALING, 0, 1, \"general\");\n    tree.skills.set(\"Sun and Stars\", sunAndStars);\n    let survivalInstinct = new Skill(\"Survival Instinct\", Attributes.HEALING, 0, 1, \"general\");\n    tree.skills.set(\"Survival Instinct\", survivalInstinct);\n    let catSchoolTechniques = new Skill(\"Cat School Techniques\", Attributes.CLOSE_RANGE, 0, 1, \"general\");\n    tree.skills.set(\"Cat School Techniques\", catSchoolTechniques);\n    let griffinSchoolTechniques = new Skill(\"Griffin School Techniques\", Attributes.DEFENSE, 0, 1, \"general\");\n    tree.skills.set(\"Griffin School Techniques\", griffinSchoolTechniques);\n    let bearSchoolTechniques = new Skill(\"Bear School Techniques\", Attributes.DEFENSE, 0, 1, \"general\");\n    tree.skills.set(\"Bear School Techniques\", bearSchoolTechniques);\n\n    let steadyShot = new Skill(\"Steady Shot\", Attributes.RANGED, 0, 1, \"general\");\n    tree.skills.set(\"Steady Shot\", steadyShot);\n    let rageManagement = new Skill(\"Rage Management\", Attributes.ADRENALINE, 0, 1, \"general\");\n    tree.skills.set(\"Rage Management\", rageManagement);\n    let focusGen = new Skill(\"Focus\", Attributes.ADRENALINE, 0, 1, \"general\");\n    tree.skills.set(\"Focus\", focusGen);\n    let adrenalineBurst = new Skill(\"Adrenaline Burst\", Attributes.ADRENALINE, 0, 1, \"general\");\n    tree.skills.set(\"Adrenaline Burst\", adrenalineBurst);\n    let metabolismControl = new Skill(\"Metabolism Control\", Attributes.UNIQUE, 0, 1, \"general\");\n    tree.skills.set(\"Metabolism Control\", metabolismControl);\n\n    return tree;\n}\n\nexport function generateSkills(desired_skills, num_points, mcts_tree = null) {\n    mcts_tree = mcts_tree ?? createTree(num_points);\n    mcts_tree.points_remaining = num_points;\n    const simulator = new Simulator(desired_skills);\n    const mcts = new MCTS(10, 2, simulator);\n    for (let i = 0; i < num_points; i++) {\n        let skill = mcts.think(mcts_tree);\n        mcts_tree = simulator.nextState(mcts_tree, skill);\n    }\n    // simulator.printFractions(mcts_tree);\n    return mcts_tree;\n}\n\n// exports.generateSkills = generateSkills;\n// exports.createTree = createTree;","import React, { useState, createContext } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppContextProvider = props => {\n\n    const [selectedSkills, setSelectedSkills] = useState({ combat: [], sign: [], alchemy: [], general: [] });\n\n    return (\n        <AppContext.Provider value={{ selectedSkills, setSelectedSkills }}>\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport { Form, Button, Spinner, Col, Row } from 'react-bootstrap';\n\nimport { generateSkills, createTree } from '../mcts.js';\nimport { AppContext } from '../context/AppContext';\nimport { camelCase, startCase } from 'lodash';\n\n\nconst convertSkillsToRepresentation = (skills) => {\n    let combats = [];\n    let signs = [];\n    let alchemy = [];\n    let generals = [];\n    for (let [, value] of skills) {\n        switch (value.branch) {\n            case \"combat\":\n                combats.push(value);\n                break;\n            case \"signs\":\n                signs.push(value);\n                break;\n            case \"alchemy\":\n                alchemy.push(value);\n                break;\n            case \"general\":\n                generals.push(value);\n                break;\n            default:\n                console.log(\"WHATS THIS\", value);\n                break;\n        }\n    }\n    return { combat: combats, sign: signs, alchemy: alchemy, general: generals };\n}\n\nconst SelectSettings = () => {\n    const [value, setValue] = useState({ Healing: 16, Melee: 16, Ranged: 16, Adrenaline: 16, Defense: 16, Unique: 16 });\n    const [startTree] = useState(() => {\n        const initialTree = createTree();\n        return initialTree;\n    });\n    const [pointCount, setPointCount] = useState(0);\n    const [isLoading, setLoading] = useState(false);\n\n    const { setSelectedSkills } = useContext(AppContext);\n\n    useEffect(() => {\n        async function computeSkills() {\n            await new Promise(r => setTimeout(r, 20));;\n            const tree = generateSkills(value, pointCount, startTree);\n            const selected_skills = convertSkillsToRepresentation(tree.skills);\n            setSelectedSkills(selected_skills);\n            setLoading(false);\n        }\n        if (isLoading) {\n            computeSkills();\n        }\n    }, [isLoading, pointCount, setSelectedSkills, startTree, value, value.Healing, value.Melee, value.Ranged, value.Adrenaline, value.Defense, value.Unique]);\n\n\n    const MAX_SKILLS = 96;\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n    };\n\n    const getSortedValues = () => Object.entries(value)\n        .sort(([, a], [, b]) => b - a)\n        .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});\n\n    const calculateSliders = (e, key) => {\n        let newValue = parseInt(e.target.value);\n        let difference = value[key] - newValue;\n        let sorted = getSortedValues();\n        let diff_remaining = difference;\n\n        sorted[key] = newValue;\n        for (let k in sorted) {\n            if (k === key) {\n                continue;\n            }\n            let val = sorted[k];\n            if (val + diff_remaining < 0) {\n                sorted[k] = 0;\n                diff_remaining = val + diff_remaining;\n            } else {\n                sorted[k] = val + diff_remaining;\n                diff_remaining = 0;\n                break;\n            }\n        }\n        setValue({\n            Healing: sorted.Healing,\n            Melee: sorted.Melee,\n            Ranged: sorted.Ranged,\n            Adrenaline: sorted.Adrenaline,\n            Defense: sorted.Defense,\n            Unique: sorted.Unique\n        });\n    };\n\n    return (\n        <Form style={{ width: '100%' }} onSubmit={handleSubmit}>\n            <Form.Group as={Row} className=\"mb-3\">\n                <Form.Label>\n                    <b>Available Points</b>\n                </Form.Label>\n                <Col>\n                    <Form.Control type=\"number\" pattern=\"^[0-9]\" value={pointCount} onChange={e => setPointCount(parseInt(e.target.value))} />\n                </Col>\n                <Col style={{ display: 'flex', alignItems: 'center' }}>\n                    {pointCount}\n                </Col>\n            </Form.Group>\n            {Object.keys(value).map((key, index) => {\n                return (\n                    <Form.Group as={Row} className=\"mb-3\" key={index}>\n                        <Col style={{ display: 'flex', alignItems: 'center' }}>\n                            <Form.Label column sm={2}>\n                                <b>{startCase(camelCase(key.replace(/_/g, \" \")))}</b>\n                            </Form.Label>\n                        </Col>\n                        <Col style={{ display: 'flex', alignItems: 'center' }}>\n                            <Form.Range value={value[key]} onChange={e => calculateSliders(e, key)} min={0} max={MAX_SKILLS} />\n                        </Col>\n                        <Col style={{ display: 'flex', alignItems: 'center' }}>\n                            {value[key]}%\n                        </Col>\n                    </Form.Group>\n                );\n            })}\n\n            <Form.Group as={Row} className=\"mb-3\">\n                <Col>\n                    <div className=\"d-grid gap-2\">\n                        <Button type=\"submit\" disabled={isLoading}>\n\n                            {(isLoading) ? (\n                                <Spinner\n                                    as=\"span\"\n                                    animation=\"border\"\n                                    size=\"sm\"\n                                    role=\"status\"\n                                    aria-hidden=\"true\"\n                                />\n                            ) : null}\n                            {(isLoading) ? ' Loading…' : 'Compute'}\n                        </Button>\n                    </div>\n                </Col>\n            </Form.Group>\n        </Form>\n    );\n};\n\nexport default SelectSettings;\n","import React from 'react';\n\nconst Header = () => {\n    return (\n        <div>\n            <h1 className=\"font-weight-light display-1 text-center witcherTitle\">SkillCraft</h1>\n        </div>\n    );\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/Skill-Sprite-Sheet.ad77e6d1.png\";","import React from 'react';\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\nimport backgroundImage from '../imgs/Skill-Sprite-Sheet.png';\nimport customData from '../imgs/skills-spritesheet.json';\n\nconst Sprite = ({ item }) => {\n    const info = customData.frames[item.name]\n    if (!info) {\n        console.log(item.name)\n        return <div></div>;\n    }\n    const style = {\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundPosition: `${info.frame.x * (-1)}px ${info.frame.y * (-1)}px`,\n        backgroundRepeat: 'no-repeat',\n        width: info.frame.w,\n        height: info.frame.h,\n        margin: '0 auto',\n    };\n\n    return (\n        <OverlayTrigger\n            placement={'bottom'}\n            overlay={\n                <Popover id={`popover-sprite`}>\n                    <Popover.Header as=\"h3\">\n                        {`${item.points}/${item.maxPoints} ${item.name}`}\n                    </Popover.Header>\n                    <Popover.Body>\n                        {info.desc}\n                    </Popover.Body>\n                </Popover>\n            }>\n\n            <div style={style} />\n        </OverlayTrigger>\n    )\n}\n\nexport default Sprite;\n","import React, { useContext } from 'react';\nimport SelectSettings from '../components/SelectSettings';\nimport { AppContext } from '../context/AppContext';\nimport Header from '../components/Header';\nimport { Row, Col } from 'react-bootstrap';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { capitalize } from 'lodash';\nimport Sprite from '../components/Sprite';\nimport { Container } from 'react-bootstrap';\n\nconst chunkArrayInGroups = (arr, size) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i += size)\n        result.push(arr.slice(i, i + size));\n    return result;\n}\n\nconst Home = () => {\n    const { selectedSkills } = useContext(AppContext);\n    return (\n        <div style={{ zIndex: 5 }}>\n            <Header />\n            <Row>\n                <Col className={\"settingsForm bodyFont\"} sm={4}>\n                    <SelectSettings />\n                </Col>\n\n                <Col sm={7}>\n                    <Tabs defaultActiveKey=\"combat\" className=\"mb-3 \" variant={\"tabs\"}>\n                        {selectedSkills && Object.keys(selectedSkills).map((key, index) => {\n                            let data = [];\n                            if (selectedSkills) {\n                                data = chunkArrayInGroups(selectedSkills[key], 5);\n                            }\n                            return (\n                                <Tab eventKey={key} title={capitalize(key) + \" Skills\"} key={index}>\n                                    <Container className={\"container\"}>\n                                        {data.map((row, rowIndex) => {\n                                            return (\n                                                <Row xs={5} key={rowIndex} className={\"rowItem\"}>\n                                                    {row.map((item, itemIndex) => {\n                                                        return (\n                                                            <Col xs={2} key={itemIndex} className={\"gridItem bodyFont\"} disabled={item.points === 0}>\n                                                                <Sprite item={item} />\n                                                                {item.points} / {item.maxPoints}\n                                                            </Col>\n                                                        );\n                                                    })}\n                                                </Row>\n                                            )\n                                        })}\n                                    </Container>\n                                </Tab>\n                            );\n                        })}\n                    </Tabs>\n                </Col>\n            </Row>\n        </div>\n    )\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Home from './routes/Home';\nimport { AppContextProvider } from './context/AppContext';\nimport { Container } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <AppContextProvider>\n      <div filter='blur(5px)' className={\"customBackground\"} />\n      <Container >\n        <Router basename={window.location.pathname || ''}>\n          <Routes>\n            <Route exact path=\"/\" element={<Home />} />\n          </Routes>\n        </Router>\n      </Container>\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","import './App.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}